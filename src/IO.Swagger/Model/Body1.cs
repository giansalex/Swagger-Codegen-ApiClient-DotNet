/* 
 * Swagger Generator
 *
 * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI spec version: 2.2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Body1
    /// </summary>
    [DataContract]
    public partial class Body1 :  IEquatable<Body1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Body1" /> class.
        /// </summary>
        /// <param name="Spec">Spec.</param>
        /// <param name="Options">Options.</param>
        /// <param name="SwaggerUrl">SwaggerUrl.</param>
        /// <param name="AuthorizationValue">AuthorizationValue.</param>
        /// <param name="SecurityDefinition">SecurityDefinition.</param>
        public Body1(Object Spec = default(Object), Dictionary<string, string> Options = default(Dictionary<string, string>), string SwaggerUrl = default(string), GenclientslanguageAuthorizationValue AuthorizationValue = default(GenclientslanguageAuthorizationValue), GenclientslanguageSecurityDefinition SecurityDefinition = default(GenclientslanguageSecurityDefinition))
        {
            this.Spec = Spec;
            this.Options = Options;
            this.SwaggerUrl = SwaggerUrl;
            this.AuthorizationValue = AuthorizationValue;
            this.SecurityDefinition = SecurityDefinition;
        }
        
        /// <summary>
        /// Gets or Sets Spec
        /// </summary>
        [DataMember(Name="spec", EmitDefaultValue=false)]
        public Object Spec { get; set; }
        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public Dictionary<string, string> Options { get; set; }
        /// <summary>
        /// Gets or Sets SwaggerUrl
        /// </summary>
        [DataMember(Name="swaggerUrl", EmitDefaultValue=false)]
        public string SwaggerUrl { get; set; }
        /// <summary>
        /// Gets or Sets AuthorizationValue
        /// </summary>
        [DataMember(Name="authorizationValue", EmitDefaultValue=false)]
        public GenclientslanguageAuthorizationValue AuthorizationValue { get; set; }
        /// <summary>
        /// Gets or Sets SecurityDefinition
        /// </summary>
        [DataMember(Name="securityDefinition", EmitDefaultValue=false)]
        public GenclientslanguageSecurityDefinition SecurityDefinition { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body1 {\n");
            sb.Append("  Spec: ").Append(Spec).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  SwaggerUrl: ").Append(SwaggerUrl).Append("\n");
            sb.Append("  AuthorizationValue: ").Append(AuthorizationValue).Append("\n");
            sb.Append("  SecurityDefinition: ").Append(SecurityDefinition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Body1);
        }

        /// <summary>
        /// Returns true if Body1 instances are equal
        /// </summary>
        /// <param name="other">Instance of Body1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body1 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Spec == other.Spec ||
                    this.Spec != null &&
                    this.Spec.Equals(other.Spec)
                ) && 
                (
                    this.Options == other.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(other.Options)
                ) && 
                (
                    this.SwaggerUrl == other.SwaggerUrl ||
                    this.SwaggerUrl != null &&
                    this.SwaggerUrl.Equals(other.SwaggerUrl)
                ) && 
                (
                    this.AuthorizationValue == other.AuthorizationValue ||
                    this.AuthorizationValue != null &&
                    this.AuthorizationValue.Equals(other.AuthorizationValue)
                ) && 
                (
                    this.SecurityDefinition == other.SecurityDefinition ||
                    this.SecurityDefinition != null &&
                    this.SecurityDefinition.Equals(other.SecurityDefinition)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Spec != null)
                    hash = hash * 59 + this.Spec.GetHashCode();
                if (this.Options != null)
                    hash = hash * 59 + this.Options.GetHashCode();
                if (this.SwaggerUrl != null)
                    hash = hash * 59 + this.SwaggerUrl.GetHashCode();
                if (this.AuthorizationValue != null)
                    hash = hash * 59 + this.AuthorizationValue.GetHashCode();
                if (this.SecurityDefinition != null)
                    hash = hash * 59 + this.SecurityDefinition.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
